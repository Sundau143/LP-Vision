import React from "react";
import useSWR, { mutate } from "swr";
import { fetcher } from "../../helpers/axios";
import axiosService from "../../helpers/axios";
import { Link, useNavigate, useParams } from "react-router-dom";
import Nav from "react-bootstrap/Nav";
import Spinner from "react-bootstrap/Spinner";
import { Container, Row, Col, Button } from "react-bootstrap";
import Forbidden from "../errorPages/Forbidden";
import Unauthorized from "../errorPages/Unauthorized";
import NotFound from "../errorPages/NotFound";
import { ToasterContext } from "../../components/ToasterProvider";
import TopNavbar from "../../components/TopNavbar";

const CameraList = () => {
  const { data, error } = useSWR("/camera/", fetcher);

  console.log(data);

  const toasterContext = React.useContext(ToasterContext);

  const navigate = useNavigate();

  const { profileId } = useParams();

  const getStatusColor = (status) => {
    if (status === "–û–Ω–ª–∞–π–Ω") {
      return "text-success";
    } else if (status === "–û—Ñ–ª–∞–π–Ω") {
      return "text-danger";
    } else {
      return "text-warning";
    }
  };

  const handleDelete = (item) => {
    axiosService
      .delete(`/camera/${item.id}/`)
      .then(() => {
        toasterContext.showToast(
          "–í–∏–¥–∞–ª–µ–Ω–æ!",
          "–ö–∞–º–µ—Ä—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ üöÄ",
          "success"
        );
        // Call mutate to update the locally cached data
        mutate(
          `/camera/`,
          (cachedData) => {
            // Filter out the deleted item from the cached data
            return {
              ...cachedData,
              results: cachedData.results.filter(
                (result) => result.id !== item.id
              ),
              count: cachedData.count - 1,
            };
          },
          false
        );
      })
      .catch((error) => {
        console.log(error);
        toasterContext.showToast(
          "–ü–æ–º–∏–ª–∫–∞!",
          "–ü—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞–º–µ—Ä–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞",
          "danger"
        );
      });
  };

  if (error) {
    if (error?.response?.status === 401) {
      return <Unauthorized></Unauthorized>;
    }
    if (error?.response?.status === 403) {
      return <Forbidden></Forbidden>;
    }
    if (error?.response?.status === 404) {
      return <NotFound></NotFound>;
    }
    return <div>Error loading data</div>;
  }

  if (!data) {
    return (
      <Spinner animation="border" role="status">
        <span className="visually-hidden">Loading...</span>
      </Spinner>
    );
  }

  return (
    <>
      <TopNavbar>
        <Nav.Link href={`/profile/${profileId}/`}>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</Nav.Link>
        <Nav.Link href={`/profile/${profileId}/users`}>–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</Nav.Link>
        <Nav.Link href={`create/`}>–î–æ–¥–∞—Ç–∏ –∫–∞–º–µ—Ä—É</Nav.Link>
      </TopNavbar>
      <div class="container text-center p-4 rounded">
        <h2>–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–∞–º–µ—Ä —Å–∏—Å—Ç–µ–º–∏</h2>
      </div>
      <div class="container-fluid text-center px-4">
        {data.count === 0 && (
          <Container className="text-center py-5">
            <Row>
              <Col>
                <h2 className="mb-4">–ñ–æ–¥–Ω–æ—ó –∫–∞–º–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</h2>
                <p className="lead">
                  –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è, –∫–æ–ª–∏ —É —Å–∏—Å—Ç–µ–º—ñ –±—É–¥–µ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞, –∞–±–æ
                  –¥–æ–¥–∞–π—Ç–µ —ó—ó —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
                </p>
                <Button variant="primary" href={`/`}>
                  –ù–∞ –≥–æ–ª–æ–≤–Ω—É
                </Button>
              </Col>
            </Row>
          </Container>
        )}
        {data.count !== 0 && (
          <div className="table-responsive">
            <table className="table table-striped table-bordered table-hover table-rounded border border-2 border-dark rounded-pill responsive">
              <thead>
                <tr className="border border-2 border-dark">
                  <th className="border border-2 border-dark">‚Ññ</th>
                  <th className="border border-2 border-dark">id</th>
                  <th className="border border-2 border-dark">–í–ª–∞—Å–Ω–∏–∫</th>
                  <th className="border border-2 border-dark">–ù–∞–∑–≤–∞</th>
                  <th className="border border-2 border-dark">–ú–æ–¥–µ–ª—å</th>
                  <th className="border border-2 border-dark">–õ–æ–∫–∞—Ü—ñ—è</th>
                  <th className="border border-2 border-dark">–°—Ç–∞—Ç—É—Å</th>
                  <th className="border border-2 border-dark">–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                  <th className="border border-2 border-dark">–û–Ω–æ–≤–ª–µ–Ω–æ</th>
                  <th className="border border-2 border-dark">–ù–æ–º–µ—Ä–∏</th>
                  <th className="border border-2 border-dark">–¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è</th>
                  <th className="border border-2 border-dark">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚úèÔ∏è</th>
                  <th className="border border-2 border-dark">–í–∏–¥–∞–ª–∏—Ç–∏ üóëÔ∏è</th>
                </tr>
              </thead>
              <tbody>
                {data.results.map((item, index) => (
                  <tr key={index}>
                    <td className="border border-2 border-dark col-1">
                      {index + 1}
                    </td>
                    <td className="border border-2 border-dark col-1">
                      {item.id}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.owner}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.name}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.model}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.location}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      <div className={getStatusColor(item.status)}>
                        {item.status}
                      </div>
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.created.slice(0, 10)}
                    </td>
                    <td className="border border-2 border-dark col-2">
                      {item.updated.slice(0, 10)}
                    </td>
                    <td className="border border-2 border-dark col-1">
                      <Link to={`${item.id}/license_plates`}>–í—ñ–¥–∫—Ä–∏—Ç–∏</Link>
                    </td>
                    <td className="border border-2 border-dark col-1">
                      <Link to={`${item.id}/broadcast`}>–í—ñ–¥–∫—Ä–∏—Ç–∏</Link>
                    </td>
                    <td className="border border-2 border-dark col-1">
                      <Button
                        variant="outline-primary"
                        onClick={() => navigate(`${item.id}/edit/`)}
                      >
                        ‚úèÔ∏è
                      </Button>
                    </td>
                    <td className="border border-2 border-dark col-1">
                      <Button
                        variant="outline-danger"
                        onClick={() => handleDelete(item)}
                      >
                        ‚ùå
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}  
        <div class="container p-3">
          <Button onClick={() => navigate(`create/`)}>–î–æ–¥–∞—Ç–∏ –∫–∞–º–µ—Ä—É</Button>
        </div>
      </div>
    </>
  );
};

export default CameraList;
